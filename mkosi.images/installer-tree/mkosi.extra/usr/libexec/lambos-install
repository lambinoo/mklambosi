#!/bin/bash

set -- $(cat /proc/cmdline)
set -eu

declare INSTALL_IMAGE_PREFIX=/usr/lib/installer/lambos \
        TARGET_DISK="/dev/vda"

parse_uki_cmdline() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            roothash=*)
                get_value "$1"
                return
                ;;

            *) ;;
        esac
        shift
    done

    return 1
}

get_root_hash() {
    local part=$1
    local tmpdir=$(mktemp -d)

    mount "${part}" "${tmpdir}" >&2
    parse_uki_cmdline $(objcopy --dump-section=.cmdline=/dev/stdout "${tmpdir}/EFI/BOOT/BOOTX64.EFI" | tr -d '\0')
    umount "${part}"
}

get_value() {
    printf "%s" "$1" | cut -d= -f2-
}

setup_data() {
    local part_file=${INSTALL_IMAGE_PREFIX}.$1.zst
    local part_dest=${TARGET_DISK}${2}
    
    echo "Flashing ${part_file} to ${part_dest}"
    if [[ ! -f "${part_file}" ]]; then
        echo "    ${part_file} doesn't exist, aborting"
        exit 1
    fi
    
    if [[ ! -b "${part_dest}" ]]; then
        echo "    ${part_dest} doesn't exist, aborting"
        exit 1
    fi

    zstd -o /dev/stdout -d "${part_file}" | dd iflag=fullblock of="${part_dest}" bs=4M status=progress conv=fsync oflag=direct
}

apply_parts_uuid() {
    local -r root_hash=$1 root_index=$2 verity_index=$3

    local uuids=( $(python3 /usr/libexec/get-part-uuid-from-root-hash "${root_hash}") )
    if [[ ${#uuids[@]} -eq 2 ]]; then
        local root_uuid="${uuids[0]}" verity_uuid="${uuids[1]}"
        sfdisk --part-uuid "${TARGET_DISK}" "${root_index}" "${root_uuid}"
        sfdisk --part-uuid "${TARGET_DISK}" "${verity_index}" "${verity_uuid}"
    else
        return 1
    fi
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        lambos.image_prefix=*)
            INSTALL_IMAGE_PREFIX=$(get_value "$1")
            ;;

        lambos.target=*)
            TARGET_DISK=$(get_value "$1")
            ;;

        *)
            echo "Ignoring unknown arg: $1"
            ;;
    esac
    shift
done

# Setup partitions
wipefs --all "${TARGET_DISK}"
systemd-repart --dry-run=no --empty=require --definitions=/usr/lib/repart.d/ "${TARGET_DISK}" --json=pretty --no-pager
partx -uv "${TARGET_DISK}"
udevadm settle -t 10 || /bin/true

# Write partition data
declare PARTITIONS=(esp root root-verity)

declare -i part_index=1
for image in "${PARTITIONS[@]}"; do
    setup_data "${image}" "$((part_index++))"
done

declare root_hash=$(get_root_hash "${TARGET_DISK}1")
apply_parts_uuid "${root_hash}" 2 3
